#!/bin/bash
set -e

goenv_path="$HOME/.goenv"
version_root="$goenv_path/root"
go_url="https://storage.googleapis.com/golang"
versions_list=$goenv_path/.version_list

# Colors
red="\e[31m"
gre="\e[32m"
yel="\e[33m"
blu="\e[34m"
pup="\e[35m"
nei="\e[36m"
de="\e[39m"

function goenv() {
    declare -a modes 
    local modes=($@)

    usage() {
        echo " goenv command list:"
        echo ""
        echo "        help: display how to use goenv command."
        echo "         use: switches your go version."
        echo "       fetch: caches go versions for completions."
        echo "        list: lists your go versions."
        echo "     install: install go."
        echo "   uninstall: uninstall your installed go."
        echo ""
    }

    help() {
        case $1 in
            use|uninstall)
                echo -e "Usage: goenv $1 <installed_go_version>"
                echo ""
                echo -e " <installed_go_version> is the version of your installed go at $version_root."
                echo -e " If you check your go versions, execute 'goenv list'."
                echo ""
                ;;
            fetch)
                echo -e "Usage: goenv fetch"
                echo -e " fetchs available go verions and caches to $versions_list."
                ;;
            list)
                echo -e "Usage: goenv list"
                ;;
            install)
                echo -e "Usage: goenv install <version>"
                echo ""
                echo -e " <version> is the version of go (e.g. go1.5.3)."
                echo ""
                ;;
            *)
                usage
                ;;
        esac
    }

    fetch() {
        touch $versions_list
        local list=`git ls-remote -t https://go.googlesource.com/go | awk -F/ '{ print $NF }' | grep go`
        echo "$list"
        echo "$list" >! $versions_list
    }

    install() {
        mkdir -p $version_root
        local version=$1
        local filename=${version}.linux-amd64.tar.gz
        echo -e "${gre}Starts to install ${version}. ($version_root/$version)${de}"
        if [[ $version != "" ]] ; then
            if [[ -d "$version_root/$version" ]] ; then
                echo -e "${yel}Warning: Already installed ${version}."
            else
                cd /tmp
                if [[ ! -f "${filename}" ]] ; then
                    curl -O -o -L $go_url/${version}.linux-amd64.tar.gz 
                fi
                tar zxf ${filename} 
                mv go $version_root/${version}
            fi
            echo -e "${gre}Succeed to install ${version}.${de}"
        else
            usage "install"
        fi
    }

    uninstall() {
        if [[ $# -eq 1 ]] ; then
            local version=$1
            if [[ -d "${version_root}/${version}" ]] ; then
                echo -e "${gre}Delete ${version}. ($version_root/$version)${de}"
                rm -rf $version_root/$version
            else
                echo -e "${pup}Does not exists ${version}. ($version_root/$version)${de}"
            fi
        else
            help "uninstall"
            return
        fi
    }

    list() {
        echo `ls $version_root`
    }

    use() {
        if [[ $# -ne 1 ]] ; then
            echo -e "$red[ERROR] Wrong argument: $1${de}"
            help "use"
            return
        fi

        local version=$1
        if [[ -d "$version_root/${version}" ]] ; then 
            # remove symlink
            rm -f $GOROOT 
            ln -s $version_root/$version $GOROOT
            echo -e "${gre}switched go version."
            echo -n -e "${blu}"
            echo -e `go version`
            echo -n -e "${de}"
        else
            echo -e "$red[ERROR] Does not exist version ($HOME/.goenv): ${version}${de}"
            echo -e "your installed go versions:"
            list
        fi
    }

    case ${modes[0]} in
        help|install|use|uninstall)
            ${modes[0]} ${modes[1]}
            return 
            ;;
        list|fetch)
            ${modes[0]}
            return
            ;;
        *)
            usage
            return
            ;;
    esac
}

goenv $@
